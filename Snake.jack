class Snake {
    static Array array;
    field int length;
    field Fruit fruit;

    constructor Snake init(int l) {
        var int i, j, randX, randY;
        let randX = Random.randInt(80, 430);
        let randY = Random.randInt(80, 190);
        let i = 0;
        let length = l;
        let array = Array.new(length);
        while(i < length) {
            let j = i * 10;
            let array[i] = Block.new(randX + j, randY);
            let i = i + 1;
        }
        do DrawSnake();
        let fruit = Fruit.CreateFruit(length);
        return this;
    }

    method boolean MoveSnake(int direction) {
        var int x, y, i;
        var Block block;
        var boolean touchBorder;
        let i = length - 1;
        do Block.DrawHead(array[0], false);
        do Block.DrawHead(array[1], false);
        while(i > 0) {
            let block = array[i - 1];
            let x = block.GetCoord(true);
            let y = block.GetCoord(false);
            do Block.DrawTail(array[i], false);
            do Block.dispose(array[i]); 
            let array[i] = Block.new(x, y);
            let i = i - 1;
        }
        let block = array[0];
        let x = block.GetCoord(true);
        let y = block.GetCoord(false);
        
        if(direction = 0) { let x = x - 10; }
        if(direction = 1) { let y = y - 10; } 
        if(direction = 2) { let x = x + 10; }
        if(direction = 3) { let y = y + 10; }
        
        let fruit = Fruit.CreateFruit(length);

        do block.ChangeCoords(x, y);
        let array[0] = block;

        do DrawSnake();
        let touchBorder = CheckBorder();

        if(CheckFruit()) {
            do EatFruit();
        }

        return ~touchBorder;
    }

    function void dispose(Block snake) {
        do Block.dispose(snake);
        return;
    }

    method void DrawSnake() {
        var int i;
        let i = 1;
        do Block.DrawHead(array[0], true);
        while(i < length) {
            do Block.DrawTail(array[i], true);
            let i = i + 1;
        }
        return;
    }

    method boolean CheckBorder() {
        var Array borders;
        var Block head;
        var int x, y;
        let borders = Game.GetBorders();
        let head = array[0];
        let x = head.GetCoord(true);
        let y = head.GetCoord(false);
        if((x < borders[0]) | (x > borders[2]) | (y < borders[1]) | (y > borders[3])) {
            return true;
        }
        return false;
    }

    method boolean CheckFruit() {
        var int fx, fy, x, y, dir;
        var Block head;
        let dir = Game.getDirection();
        let head = array[0];
        let fx = fruit.GetCoord(true);
        let fy = fruit.GetCoord(false);
        let x = head.GetCoord(true);
        let y = head.GetCoord(false);
        if(dir = 0) { let x = x - 10; }
        if(dir = 1) { let y = y - 10; }
        if(dir = 2) { let x = x + 10; }
        if(dir = 3) { let y = y + 10; }
        return (fx = x) & (fy = y);
    }

    method void EatFruit() {
        var Array newarr;
        var int i, x, y;
        let length = length + 1;
        let newarr = Array.new(length);
        let i = 1;
        while(i < length) {
            let newarr[i] = array[i - 1];
            let i = i + 1;
        }
        let x = fruit.GetCoord(true);
        let y = fruit.GetCoord(false);
        let newarr[0] = Block.new(x, y);
        let array = newarr;
        let fruit = Fruit.CreateFruit(length);
        return;
    }

    function Array getArray() {
        return array;
    }
}